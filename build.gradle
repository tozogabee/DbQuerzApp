plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.7.0'
    id 'jacoco'
}

group = 'examp.org.com'
version = '0.0.1-SNAPSHOT'
description = 'DbQuerzApp'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "$rootDir/src/main/resources/openapi/openapi.yml"
    outputDir = "$buildDir/generated/openapi"
    apiPackage = 'com.example.api'
    modelPackage = 'com.example.model'
    invokerPackage = 'com.example.invoker' // optional
    generateApiTests = false
    generateModelTests = false
    configOptions = [
            interfaceOnly    : 'true',   // only interfaces; you implement them
            useSpringBoot3   : 'true',
            dateLibrary      : 'java8',
            hideGenerationTimestamp: 'true'
    ]
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.25'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.6.0'

}

sourceSets {
    main.java.srcDir("$buildDir/generated/openapi/src/main/java")
}

tasks.compileJava.dependsOn tasks.openApiGenerate

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Exclude generated OpenAPI classes
                'com/example/**',
                // Exclude Spring Boot main class
                '**/DbQuerzAppApplication.class',
                // Exclude configuration classes
                '**/*Config*.class',
                // Exclude exception handlers
                '**/GlobalExceptionHandler.class',
                // Exclude entity/model classes (Lombok-generated code)
                '**/model/**/*.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.5 // 80% coverage threshold
            }
        }
        rule {
            element = 'CLASS'
            excludes = [
                'com.example.*',
                'examp.org.com.dbquerzapp.DbQuerzAppApplication',
                'examp.org.com.dbquerzapp.*Config*',
                'examp.org.com.dbquerzapp.exception.GlobalExceptionHandler',
                'examp.org.com.dbquerzapp.model.*'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.75 // 75% line coverage per class
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
